#!/bin/bash

LANG=C
export LANG

error_msg() {
	local msg="$1"
	[ -z "${msg}" ] && msg="Unknown error"
	printf "ERROR: %s\n" "${msg}" >&2
	exit 1
}

warn_msg() {
	local msg="$1"
	[ -z "${msg}" ] && msg="Unknown error"
	printf "WARNING: %s\n" "${msg}" >&2
}

info_msg() {
	local msg="$1"
	[ -z "${msg}" ] && msg="Unknown info"
	printf "INFO: %s\n" "${msg}" >&1
}

check_root() {
	if [ "$(id -ru)" -ne 0 ]; then
		error_msg "Script should run in root privilages"
	fi
}

check_pkgs_installed() {
	pkgs="$*"
	for pkg in ${pkgs};do
		dpkg -s "${pkg}" >/dev/null
		if [ $? -eq 0 ]; then
			info_msg "${pkg} Package  is installed!"
		else
			warn_msg "${pkg} Package  is NOT installed!"
		fi
	done
}

add_user() {

	if [ "$#" -lt 2 ]; then
		error_msg "Usage: add_user  username user_password "
	fi

	USER=$1
	USERPSWD=$2

	info_msg "Creating user '${USER}' ----"
	if /usr/sbin/useradd --shell /bin/bash --create-home \
		-p $(openssl passwd -crypt $USERPSWD) "${USER}";then
		info_msg "user: '${USER}' created successfully"
	else
		error_msg "Failed to create user: '${USER}'"
	fi
}

check_user() {
	USER=$1
	if grep -q "^$USER:" /etc/passwd ;then
		info_msg "check_user: '$USER' exist"
		return 0
	else
		info_msg "check_user: '$USER' doesn't exist"
		return 1
	fi
}

del_user() {
    USER=$1
	if check_user $USER;then
		info_msg "Deleting user '$USER'"

		# Check if the user is used by any process
		TIMEOUT=1
		i=0
		while [ $i -lt 30 ]; do
			if ps -U "${USER}" -u "${USER}" > /dev/null;then
				warn_msg "${USER} is used by another process:"
				echo "$(ps -U ${USER} -u ${USER})"
			else
				TIMEOUT=0
				break
			fi

			sleep 2s
			i=$((i+1))
		done

		if [ $TIMEOUT -eq 0 ]; then
			if /usr/sbin/deluser "${USER}" > /dev/null; then
				info_msg "del_user: '${USER}' deleted successfully"

				# delete directory manually,
				#'deluser' can alsp delete with option --remove-home
				#  but it requires perl package
				[ -d /home/$USER ] && rm -rf /home/$USER
			else
				error_msg "del_user: Could not delete '${USER}'"
			fi
		else
			error_msg "del_user: Could not delete '$USER'"
		fi
	fi

	# Delete the group as well if still present
	if getent group | grep -q "^$USER:"; then
		groupdel $USER
	fi
}

create_test_user() {
	USER=$1
	USERPSWD=$2

	del_user $USER
	add_user $USER $USERPSWD
}
